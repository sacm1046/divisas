name: Redis

on:
  workflow_dispatch:
    inputs:
      type:
        description: "Descripción de la ejecución"
        required: false
        type: choice
        options:
          - "[EMPTY]"
          - "OPTION 1"
          - "OPTION 2"
          - "OPTION 3"
          - "OPTION 4"
  # schedule:
  #   - cron: "0 0 * * *"

jobs:
  redis-save:
    runs-on: ubuntu-latest

    env:
        URL_BASE: ${{ vars.URL_BASE }}
        REDIS_URL: ${{ secrets.REDIS_URL }}

    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Instalar dependencias
        run: npm install

      - name: Iniciar servidor Express en segundo plano
        run: npm start &

      - name: Esperar a que el servidor esté listo
        run: sleep 5

      - name: Hacer petición GET con reintentos
        run: | 
            MAX_RETRIES=${{ vars.MAX_RETRIES }}
            COUNT=0
            URL="http:/localhost:3000/currencies/redis"

            echo "Iniciando peticiones a $URL"

            while [ $COUNT -lt $MAX_RETRIES ]; do
                STATUS_CODE=$(curl -s -o response.json -w "%{http_code}" $URL)

                if [ "$STATUS_CODE" -eq 200 ]; then
                    echo "✅ Servicio respondió con 200"
                    cat response.json  # Imprimir la respuesta JSON
                    break
                else
                    echo "⚠ Respuesta HTTP: $STATUS_CODE. Reintentando en 3s..."
                    COUNT=$((COUNT+1))
                    sleep 3
                fi
            done

            if [ "$STATUS_CODE" -ne 200 ]; then
                echo "❌ No se obtuvo respuesta 200 después de $MAX_RETRIES intentos."
                exit 1
            fi

      - name: Finalizar procesos en segundo plano
        run: kill $(lsof -t -i:3000) || true
run-name: "Redis from ${{  inputs.type != ' ' && inputs.type || 'VALOR DEFECTO' }}"